server:
  port: 9000 # ??? ??? ???? ??
  netty:
    connection-timeout: 2s
    idle-timeout: 15s
  shutdown: graceful

spring:
  application:
    name: edge-service
  lifecycle:
    timeout-per-shutdown-phase: 15s # ??? ?? ??? 15?? ??
  config:
    import: "optional:configserver:"
  security:
    oauth2:
      client:
        registration:
          # 스프링 보안에서 클라이언트 등록을 식별하는 이름 ("registrationId"라고도 부른다)
          keycloak:
            # 키클록에 정의된 OAuth2 클라이언트 식별자
            client-id: edge-service
            # 클라이언트가 키클록과 인증하기 위해 사용하는 공유 시크릿
            client-secret: polar-keycloak-secret
            # 클라이언트가 접근 권한을 갖기를 원하는 영역의 목록. aponid영역은 OAuth2에서 OIDC 인증을 수행한다.
            scope: openid, roles
        provider:
          keycloak:
            # 특정 영역에 대한 OAuth2와 OIDC 관련 모든 엔드포인트의 정보를 제공하는 키클록 URL
            issuer-uri: http://localhost:8080/realms/PolarBookshop

  cloud:
    gateway:
      default-filters:
        - SaveSession # ??? ???? ???? ?? ?? ???? ????.
        - TokenRelay # 다른 서비스를 호출할 때 엑세스 토큰 전달을 활성화한다.가
        - name: Retry
          args:
            retries: 3
            methods: GET
            series: SERVER_ERROR # 500 ??? ???? ???
            exceptions: java.io.IOException, java.util.concurrent.TimeoutException # ??? ??? ??? ??? ???
            backoff: # ???? firstBackoff (factor^n) ??? ??? ??
              firstBackOff: 50ms
              maxBackOff: 500ms
              factor: 2
              basedOnPreviousValue: false
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10 # ?? ??? ???? ??? ?
              burstCapacity: 20 # ?? 20? ???? ??
              requestedTokens: 1 # ??? ?? ??? ? ?? ??? ????? ??
      httpclient: # http ?????? ?? ?? ??
        connect-timeout: 2000 # ??? ??????? ???? (???)
        response-timeout: 5s # ??? ?? ???? ????(??)
        pool:
          type: elastic # ?? ? ??
          max-idle-time: 15s # ?? ??? ??? ? ???? ??
          max-life-time: 60s # ?? ??? ?? ?? ??
      routes: # ??? ?? ??
        - id: spa-route
          uri: ${SPA_URL:http://localhost:9004}
          # 루트 엔드포인트, 그리고 SPA의 정적 리소스와 일치하는 경로들의 목록이다.
          predicates:
            - Path=/,/*.css,/*.js,/favicon.ico
        - id: catalog-route # ??? ID
          uri: ${CATALOG_SERVICE_URL:http://localhost:9001}
#          uri: http://localhost:9001
          predicates:
            - Path=/books/** # ???? ??? ??? ????.
          filters:
            - name: CircuitBreaker
              args:
                name: catalogCircuitBreaker
                fallbackUri: forward:/catalog-fallback # ??? ?? ??? ? ??? ? URL? ??
        - id: order-route
          uri: ${ORDER_SERVICE_URL:http://localhost:9002} # ?ORDER_SERVICE_URL? ???? ??? : ?? ?? ?? ????? ??
#          uri: http://localhost:9002
          predicates:
            - Path=/orders/**
          filters:
            - name: CircuitBreaker # ?? ????? ?? ??? ??? ??
              args:
                name: orderCircuitBreaker

  session:
    store-type: redis
    timeout: 10m
    redis:
      namespace: polar:edge
  redis:
    connect-timeout: 2s
    host: localhost
    port: 6379
    timeout: 1s

resilience4j:
  circuitbreaker:
    configs:
      default: # ?? ?? ????? ?? ?? ??
        slidingWindowSize: 20 # ??? ??? ??? ? ??? ??? ????? ???? ???? ??? ??
        permittedNumberOfCallsInHalfOpenStatus: 5 # ??? ??? ??? ? ???? ??? ?
        failureRateThreshold: 50 # ???? ??? ???? ??? ?? ??? ???.
        waitDurationInOpenState: 15000 # ?? ???? ??? ??? ???? ??? ??(???)
  timelimiter:
    configs:
      default: # ?? ?? ??? ?? ?? ??
        timeoutDuration: 5s # ???? ?? (?)

logging:
  group:
    circuitbreaker: io.github.resilience4j, org.springframework.cloud.circuitcreaker
  level:
    circuitbreaker: info

management:
  endpoints:
    web:
      exposure:
#        include: configprops, env, gateway, health, heapdump, info, loggers, mappings, prometheus
        include: gateway, health, prometheus
  endpoint:
    health:
      show-details: always
      show-components: always
      probes:
        enabled: true
      group:
        readiness:
          include: readinessState,redis
#  info:
#    env:
#      enabled: true
#    java:
#      enabled: true
#    os:
#      enabled: true
  metrics:
    tags:
      application: ${spring.application.name}
